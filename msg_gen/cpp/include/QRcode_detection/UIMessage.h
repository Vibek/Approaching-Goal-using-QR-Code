/* Auto-generated by genmsg_cpp for file /home/vibek/QRcode_detection/msg/UIMessage.msg */
#ifndef QRCODE_DETECTION_MESSAGE_UIMESSAGE_H
#define QRCODE_DETECTION_MESSAGE_UIMESSAGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace QRcode_detection
{
template <class ContainerAllocator>
struct UIMessage_ {
  typedef UIMessage_<ContainerAllocator> Type;

  UIMessage_()
  : id(0)
  , timeout(0)
  , msg()
  , req_confirm(false)
  {
  }

  UIMessage_(const ContainerAllocator& _alloc)
  : id(0)
  , timeout(0)
  , msg(_alloc)
  , req_confirm(false)
  {
  }

  typedef int32_t _id_type;
  int32_t id;

  typedef int32_t _timeout_type;
  int32_t timeout;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  msg;

  typedef uint8_t _req_confirm_type;
  uint8_t req_confirm;


  typedef boost::shared_ptr< ::QRcode_detection::UIMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::QRcode_detection::UIMessage_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct UIMessage
typedef  ::QRcode_detection::UIMessage_<std::allocator<void> > UIMessage;

typedef boost::shared_ptr< ::QRcode_detection::UIMessage> UIMessagePtr;
typedef boost::shared_ptr< ::QRcode_detection::UIMessage const> UIMessageConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::QRcode_detection::UIMessage_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::QRcode_detection::UIMessage_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace QRcode_detection

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::QRcode_detection::UIMessage_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::QRcode_detection::UIMessage_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::QRcode_detection::UIMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "093e3e003e515d1fb001a7a552ea63e5";
  }

  static const char* value(const  ::QRcode_detection::UIMessage_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x093e3e003e515d1fULL;
  static const uint64_t static_value2 = 0xb001a7a552ea63e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::QRcode_detection::UIMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "QRcode_detection/UIMessage";
  }

  static const char* value(const  ::QRcode_detection::UIMessage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::QRcode_detection::UIMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 id\n\
int32 timeout\n\
string msg\n\
bool req_confirm\n\
\n\
";
  }

  static const char* value(const  ::QRcode_detection::UIMessage_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::QRcode_detection::UIMessage_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.timeout);
    stream.next(m.msg);
    stream.next(m.req_confirm);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct UIMessage_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::QRcode_detection::UIMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::QRcode_detection::UIMessage_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "timeout: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timeout);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.msg);
    s << indent << "req_confirm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.req_confirm);
  }
};


} // namespace message_operations
} // namespace ros

#endif // QRCODE_DETECTION_MESSAGE_UIMESSAGE_H

